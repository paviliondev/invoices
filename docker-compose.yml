version: '3'

volumes:
  db-data:
    external: false

services:
  db:
    image: postgres
    restart: unless-stopped
    volumes:
      - db-data:/var/lib/postgresql/db-data
    environment:
      POSTGRES_DB: invoices_production
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  app:
    build: 
      context: .
      dockerfile: ./docker/app/Dockerfile
      args:
        - SECRET_KEY_BASE=${SECRET_KEY_BASE}
    env_file: .env
    environment:
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_DOMAIN: ${SMTP_DOMAIN}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_AUTHENTICATION: ${SMTP_AUTHENTICATION}
      SMTP_ENABLE_STARTTLS_AUTO: ${SMTP_ENABLE_STARTTLS_AUTO}
      SSO_HOST: ${SSO_HOST}
      SSO_URL: ${SSO_URL}
      SSO_SECRET: ${SSO_SECRET}
      HOSTNAME: ${HOSTNAME}
      RAILS_LOG_TO_STDOUT: 'true'
    restart: unless-stopped
    depends_on:
      - db
      
  nginx: 
    image: nginx:latest
    restart: unless-stopped
    volumes:
      - ./docker/nginx:/etc/nginx/conf.d
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    depends_on:
      - app
    ports:
      - 80:80
      - 443:443

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"